import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import { useDispatch } from 'react-redux';
import { fetchCandidates, addComment, fetchApplications, fetchQuestions } from './feedAPI';

const initialState = {
  value: 0,
  status: 'idle',
  candidates: {},
  candidate: 0,
  questions: {},
  applications: {},
  selectedCandidate: {}
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
// export const getCandidates = createAsyncThunk(
//   'feed/getCandidates',
//   async () => {
//     const response = await fetchCandidates();
//     console.log(response);
//     // The value we return becomes the `fulfilled` action payload
//     return response;
//   }
// );

export const getAllCandidates = createAsyncThunk(
  'feed/getAllCandidates',
  async () => {
    const response = await fetchCandidates();
    console.log(response);
    // The value we return becomes the `fulfilled` action payload
    return response;
  }
);
export const getAllQuestions = createAsyncThunk(
  'feed/getAllQuestions',
  async () => {
    const response = await fetchQuestions();
    console.log(response);
    // The value we return becomes the `fulfilled` action payload
    return response;
  }
);
export const getAllApplications = createAsyncThunk(
  'feed/getAllApplications',
  async () => {
    const response = await fetchApplications();
    console.log(response);
    // The value we return becomes the `fulfilled` action payload
    return response;
  }
);
export const addComments = createAsyncThunk(
  'feed/addComments',
  async (data) => {
    console.log(data);
    const response = await addComment(data);
    console.log(response);
    // The value we return becomes the `fulfilled` action payload
    return response;
  }
);

export const feedReducerSlice = createSlice({
  name: 'feed',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    setSelectedCandidate: (state, action) => {
      console.log(action.payload);
      state.selectedCandidate = action.payload;
    },
    clearSelection: (state) => {
      state.selectedCandidate = "";
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(getAllQuestions.fulfilled, (state, action) => {
        console.log(action.payload.data);
        state.questions = action.payload.data;
      })
      .addCase(getAllCandidates.fulfilled, (state, action) => {
        console.log(action.payload.data);
        state.candidates = action.payload.data;
      })
      .addCase(getAllApplications.fulfilled, (state, action) => {
        console.log(action.payload.data);
        state.applications = action.payload.data;
      })
      .addCase(addComments.fulfilled, (state, action) => {
        let { data } = action.payload
        console.log(data);
        state.applications[data.id] = data
      })
  },
});

export const { setSelectedCandidate, clearSelection } = feedReducerSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const allCandidates = (state) => state.candidates;
export const selectedCandidate = (state) => state.candidates;
export const selectQuestions = (state) => state.questions;
export const selectApplications = (state) => state.applications;

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.
// export const incrementIfOdd = (amount) => (dispatch, getState) => {
//   const currentValue = selectCount(getState());
//   if (currentValue % 2 === 1) {
//     dispatch(incrementByAmount(amount));
//   }
// };

export default feedReducerSlice.reducer;
